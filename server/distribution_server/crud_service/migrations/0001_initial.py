# Generated by Django 5.2.7 on 2025-11-01 09:01

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=50, verbose_name='anime_name')),
                ('jikan_id', models.CharField(max_length=255, verbose_name='jikan_id')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(editable=False, max_length=30, unique=True)),
                ('tagline', models.CharField(max_length=200)),
                ('password', models.CharField(max_length=50)),
                ('email', models.CharField(db_index=True, max_length=100, unique=True)),
                ('persona_name', models.CharField(choices=[('n', 'Novice'), ('o', 'Otaku'), ('w', 'Weeb')], default='n', max_length=25)),
                ('last_online', models.DateTimeField(auto_now=True)),
                ('pfp', models.CharField(max_length=255)),
                ('banner', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnimeList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=25, verbose_name='ListName')),
                ('description', models.TextField(verbose_name='description')),
                ('types', models.TextField(choices=[('C', 'Completed'), ('O', 'Ongoing')], default='O', verbose_name='types')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('createdBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='created_by')),
            ],
        ),
        migrations.CreateModel(
            name='AnimeListEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('C', 'Completed'), ('O', 'Ongoing')], max_length=50, verbose_name='status')),
                ('review', models.TextField(null=True, verbose_name='review')),
                ('rating', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='rating')),
                ('anime_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crud_service.anime', verbose_name='anime_id')),
                ('list_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crud_service.animelist', verbose_name='list_id')),
            ],
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=50, verbose_name='title')),
                ('description', models.TextField(verbose_name='description')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='created_by')),
            ],
        ),
        migrations.CreateModel(
            name='DiscussionReplies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply', models.TextField(max_length=500, verbose_name='reply')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='created_by')),
                ('discussion_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crud_service.discussion', verbose_name='discussion_id')),
            ],
        ),
    ]
